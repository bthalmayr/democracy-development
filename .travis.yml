env:
  global:
  # SECRET
  - secure: "Xnbd0sTkr30NF/IPozUZs5Uks8V7uizIfuIoERUXy7IN4FfBuc+x+v2HR4Unho8eFh6TNDB3LA+b28Ce4aEajrxuVablLunBTLy/z48A5cyDg8dK2mXEA2iBLYTNei4BT+OBABHtmYd9uEmVTzeq07GPsb2N83LqIwSVAjZSuVJlVgT3a+j1fQrlTE3IjhgM+MaEYR8OaM/+tde5/TH3+lhBM7k71Jfw4a/no7VC1T9fnZ5MlpzZT4rqvl0OgesLrpRnyWlgbPrnrUZRR8h6+p/On9G1Azg5bF8UAfdZloez05zCT54u69tHiA6UdY24ytZtnlgcQmJ40k/NYitjzgiuJ9d7NN1YRhx5qApXdwYrt7D+9ElKuIORMnOIOe9uiUs/MlQ0Llbu51oPUUj/vUYUvhXU1XBY7yvgV1pWB6klW+xXMK+wNd+fze2EHotr0y7DX7+441OohwVC5YIFahdD4rTjHpEqolAhEH6j5y4/T0Gx/jcT/TJKUwPeR3/q71k5OxtRSgtNdxSlZnmAKLEiexS7lGkyE4/dfzxuqxzlyXaGDeAXcduwKs9H4SbZXPjMMIH4KSoOjMw3FMNyN2xJsdi/+fLqq9DAwQLgleRM0bLQCzQfRSjUzqV+6TfYGLBkqRNh8vlFy1orrebnzhVz11RO2FtGhy8tMdhCRyA="
  # MATCH_GIT
  - secure: "g+NTxqZ+/oL1UWRSsEYslPBAWQhSIguJQnhjCLqSt8mTEOMGVTMjbaBZwzY2tOBP/SOjPI6LNyYlKA/awcHQ7xOSU+ecaEsfnQYpvamRtO4MqEcIic/k2WQV/T1Zcsa4679xU+BAQmySciT5vF4DC/yk0CTnnR5NWc0ITKh3wvwllX7u+vII6NvK/UE7zU7XnneyzsP3Z8/419M89ttuyLiS6aEtndR7OYbHFKb5bL583HhWb3YFgJL5aKXT9OQfLlU/7IKFeEi70X3UEtt8gZmOwjpI8Wssgx22IQ2yOFy0PcvVhldSv/+cWQYDsWPl/6Sjc+pA3aYYToFGEp+vbT6KN2Bwng/NERxAyUXQig9sK/KCUyOg6xpRjFDgrbpUA1fZ1aTGI5kmlrmY4vjikoWLX71WWLIsY4LQuWvANPl5/nTh0NsLqPOJ2VEK5bhgsu1N2GtW0mFXAJDToed6qlUUrlg6a3znEiK2hvq5/7xFED/sMXfHr8KjnAHnIVbmVeNb8CNPrHXCLNr5NAY8PEMRxHlK+7KSos3w0RkOj/j7iURrJLKk22D5c3dPbE8O+LxIKtNvgOH8ksneT9Yrg1QyilwO3ZkdMo9pOZiNsjnWNUu/T/dc3sSXrt2eOU8gRl5Ho3+4yptyTNk2jJJmEsm7z6pkNi4jHEIV452QoGM="
  # DIGITALOCEAN_ACCESS_TOKEN
  - secure: "oWwpAQWuj9DkI5tq1WszPq5saf8RaC5U6wj/2YqMbBlSSLV/aVQp0g5+vrGEhRVas99u3obH+2H5iNKJPDECb8WmLB+U/g0ix4+zehpeoEZlMW10kCbQQIRBaNQ8go8lt4qsq0X1MEhrKMZ62uLvzVFt2Lh1MDZEGlUrHnoGB/q0R2BW6dNOWpYFwXf3oX6GFDaS1M78xwmpQ1UAkDa2Y/UmL37DyOttnptHW0/CDxP+sEn6F9/uo+3HoY96joqbSo9Rce4Jrunikc0eRIMUD3ubV1110Z2foERjLgfs9o8tyMlcfoQxeGmBrADaosauphOX9trd0pLcGCKN01pZwvJNogaE722zMUXRs71LuC6bgAjlx2JA5Vh25HF6utikkgOzlr/zev0f71dveqjjWxoagda9jxUp0FTsZx8Di+tMEzK9Cn9sdMWB5yPwzpTxi4+dG+jYe7qLmeGBWgs7kGapgUy/07vzGSpfgp6D57ZWXgjlr5R7jXFNNj6YJIfkzUNJbe5mmXN28wEWvmuiLs8pvCnbLTt/tEUHwokutONB6d+hRZl22Y2hgBz08ygEgXg9jqLkVgolwd1otPU7UhWpi4JsrlAOgEIQYSiSGInU8vtSl9qzcjN8wA69ul8P3EpxKZDaGbzbveeEdfuwdwAPM0wGSAO7bJwPFpp7oo8="
matrix:
  sudo: required
  include:
  # ########################
  # TESTING
  # ########################
  # basic docker build test
  - if: tag IS blank
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    script:
    - docker-compose build
  
  # ########################
  # CHECK FOR MASTER
  # ########################
  # client in master?
  - if: type IN (pull_request) && branch = master
    os: linux
    script:
    - ./.travis/gitbranch.sh -d "./client" -b "origin/master" -r false
  # server in master?
  - if: type IN (pull_request) && branch = master
    os: linux
    script:
    - ./.travis/gitbranch.sh -d "./server" -b "origin/master" -r false
  # bundestag.io in master?
  - if: type IN (pull_request) && branch = master
    os: linux
    script:
    - ./.travis/gitbranch.sh -d "./bundestag.io" -b "origin/master" -r false
  # elasticsearch in master?
  - if: type IN (pull_request) && branch = master
    os: linux
    script:
    - ./.travis/gitbranch.sh -d "./elasticsearch" -b "origin/master" -r false
  
  # ########################
  # DEPLOY INTERNAL
  # ########################
  # server deploy internal
  - if: tag =~ -internal\+server
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # do not ensure we are on any branch - this is internal
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_INTERNAL_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_INTERNAL_SERVER_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_INTERNAL_SERVER_USER} --ssh-command "cd ~/democracy-development && ./deploy-production.sh $TRAVIS_TAG"
    after_success:
    - ./.travis/discord.sh -t "Success Internal $TRAVIS_TAG" -d "[Server] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Internal $TRAVIS_TAG" -d "[Server] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # android deploy internal
  - if: tag =~ -internal\+client
    addons:
      apt:
        packages:
        - python2.7
    os: linux
    language: android
    jdk: oraclejdk8
    android:
      components:
      - tools
      - platform-tools
      # android 23,25,26
      - build-tools-23.0.1
      - build-tools-25.0.0
      - build-tools-25.0.1
      - build-tools-25.0.2
      - build-tools-26.0.1
      - build-tools-26.0.2
      - android-23
      - android-25
      - android-26
      # extra
      - extra-android-m2repository
      - extra-google-google_play_services
      - extra-google-m2repository
      - addon-google_apis-google-16
      licenses:
      - 'android-sdk-preview-license-.+'
      - 'android-sdk-license-.+'
      - 'google-gdk-license-.+'
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # do not ensure we are on any branch - this is internal
    install:
    - ./.travis/update.fastlane.sh -d "android"
    - source ./.travis/install.yarn.sh
    script:
    # build android & publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "android" -l "internal"
    after_success:
    - source ./.travis/travis_upload_release_to_github.py
    - ./.travis/discord.sh -t "Success Internal $TRAVIS_TAG" -d "[Android] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Internal $TRAVIS_TAG" -d "[Android] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # ios deploy internal
  - if: tag =~ -internal\+client
    osx_image: xcode9.2
    language: objective-c
    xcode_project: ios/democracyclient.xcodeproj
    xcode_scheme: ios/democracyclientTests
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # do not ensure we are on any branch - this is internal
    install:
    - ./.travis/update.fastlane.sh -d "ios"
    - source ./.travis/install.yarn.sh
    script:
    # build ios and publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "ios" -l "internal"
    after_success:
    - ./.travis/discord.sh -t "Success Internal $TRAVIS_TAG" -d "[iOS] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Internal $TRAVIS_TAG" -d "[iOS] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error

  # ########################
  # DEPLOY ALPHA
  # ########################
  # server deploy alpha
  - if: tag =~ -alpha\+server
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the alpha/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/alpha/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_ALPHA_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_ALPHA_SERVER_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_ALPHA_SERVER_USER} --ssh-command "cd ~/democracy-development && ./deploy-production.sh $TRAVIS_TAG"
    after_success:
    - ./.travis/discord.sh -t "Success Alpha $TRAVIS_TAG" -d "[Server] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Alpha $TRAVIS_TAG" -d "[Server] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # search deploy alpha
  - if: tag =~ -alpha\+search
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the alpha/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/alpha/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_ALPHA_SEARCH_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_ALPHA_SEARCH_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_ALPHA_SEARCH_USER} --ssh-command "cd ~/democracy-search && ./deploy-production.sh origin/alpha/master"
    after_success:
    - ./.travis/discord.sh -t "Success Alpha $TRAVIS_TAG" -d "[Search] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Alpha $TRAVIS_TAG" -d "[Search] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # android deploy alpha
  - if: tag =~ -alpha\+client
    os: linux
    language: android
    jdk: oraclejdk8
    android:
      components:
      - tools
      - platform-tools
      # android 23,25,26
      - build-tools-23.0.1
      - build-tools-25.0.0
      - build-tools-25.0.1
      - build-tools-25.0.2
      - build-tools-26.0.1
      - build-tools-26.0.2
      - build-tools-26.0.3
      - android-23
      - android-25
      - android-26
      # extra
      - extra-android-m2repository
      - extra-google-google_play_services
      - extra-google-m2repository
      - addon-google_apis-google-16
      licenses:
      - 'android-sdk-preview-license-.+'
      - 'android-sdk-license-.+'
      - 'google-gdk-license-.+'
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the alpha/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/alpha/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "android"
    - source ./.travis/install.yarn.sh
    script:
    # build android & publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "android" -l "alpha"
    after_success:
    - ./.travis/discord.sh -t "Success Alpha $TRAVIS_TAG" -d "[Android] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Alpha $TRAVIS_TAG" -d "[Android] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # ios deploy alpha
  - if: tag =~ -alpha\+client
    osx_image: xcode9.2
    language: objective-c
    xcode_project: ios/democracyclient.xcodeproj
    xcode_scheme: ios/democracyclientTests
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the alpha/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/alpha/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "ios"
    - source ./.travis/install.yarn.sh
    script:
    # build ios and publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "ios" -l "alpha"
    after_success:
    - ./.travis/discord.sh -t "Success Alpha $TRAVIS_TAG" -d "[iOS] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Alpha $TRAVIS_TAG" -d "[iOS] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  
  # ########################
  # DEPLOY BETA
  # ########################
  # server deploy beta
  - if: tag =~ -beta\+server
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the beta/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/beta/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_BETA_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_BETA_SERVER_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_BETA_SERVER_USER} --ssh-command "cd ~/democracy-development && ./deploy-production.sh $TRAVIS_TAG"
    after_success:
    - ./.travis/discord.sh -t "Success Beta $TRAVIS_TAG" -d "[Server] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Beta $TRAVIS_TAG" -d "[Server] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # search deploy beta
  - if: tag =~ -beta\+search
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the beta/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/beta/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_BETA_SEARCH_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_BETA_SEARCH_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_BETA_SEARCH_USER} --ssh-command "cd ~/democracy-search && ./deploy-production.sh origin/beta/master"
    after_success:
    - ./.travis/discord.sh -t "Success Beta $TRAVIS_TAG" -d "[Search] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Beta $TRAVIS_TAG" -d "[Search] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # android deploy beta
  - if: tag =~ -beta\+client
    os: linux
    language: android
    jdk: oraclejdk8
    android:
      components:
      - tools
      - platform-tools
      # android 23,25,26
      - build-tools-23.0.1
      - build-tools-25.0.0
      - build-tools-25.0.1
      - build-tools-25.0.2
      - build-tools-26.0.1
      - build-tools-26.0.2
      - build-tools-26.0.3
      - android-23
      - android-25
      - android-26
      # extra
      - extra-android-m2repository
      - extra-google-google_play_services
      - extra-google-m2repository
      - addon-google_apis-google-16
      licenses:
      - 'android-sdk-preview-license-.+'
      - 'android-sdk-license-.+'
      - 'google-gdk-license-.+'
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the beta/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/beta/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "android"
    - source ./.travis/install.yarn.sh
    script:
    # build android & publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "android" -l "beta"
    after_success:
    - ./.travis/discord.sh -t "Success Beta $TRAVIS_TAG" -d "[Android] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Beta $TRAVIS_TAG" -d "[Android] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # ios deploy beta
  - if: tag =~ -beta\+client
    osx_image: xcode9.2
    language: objective-c
    xcode_project: ios/democracyclient.xcodeproj
    xcode_scheme: ios/democracyclientTests
    before_install:    
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the beta/master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/beta/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "ios"
    - source ./.travis/install.yarn.sh
    script:
    # build ios and publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "ios" -l "beta"
    after_success:
    - ./.travis/discord.sh -t "Success Beta $TRAVIS_TAG" -d "[iOS] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Beta $TRAVIS_TAG" -d "[iOS] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error

  # ########################
  # DEPLOY PRODUCTION
  # ########################
  # server deploy production
  - if: tag =~ -production\+server
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the master branch - this does not work for some reason???
    - ./.travis/gitbranch.sh -d "./" -b "origin/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_PRODUCTION_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_PRODUCTION_SERVER_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_PRODUCTION_SERVER_USER} --ssh-command "cd ~/democracy-development && ./deploy-production.sh $TRAVIS_TAG"
    after_success:
    - ./.travis/discord.sh -t "Success Production $TRAVIS_TAG" -d "[Server] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Production $TRAVIS_TAG" -d "[Server] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # search deploy production
  - if: tag =~ -beta\+search
    os: linux
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/master" -r true
    script:
    # build docker-compose
    - docker-compose build
    # build doctl
    - docker build -t doctl --build-arg SSH_KEY="$(cat ./.travis/ssh_key)" --build-arg SSH_KEY_PUB="$(cat ./.travis/ssh_key.pub)" --build-arg HOST_IP="${DIGITAL_OCEAN_PRODUCTION_SEARCH_HOST}" - < ./doctl
    # run ssh command using doctl
    - docker run --rm -e DIGITALOCEAN_ACCESS_TOKEN="${DIGITALOCEAN_ACCESS_TOKEN}" doctl compute ssh ${DIGITALOCEAN_BETA_PRODUCTION_DROPLET_NAME} --ssh-user ${DIGITALOCEAN_PRODUCTION_SEARCH_USER} --ssh-command "cd ~/democracy-search && ./deploy-production.sh origin/master"
    after_success:
    - ./.travis/discord.sh -t "Success Production $TRAVIS_TAG" -d "[Search] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Production $TRAVIS_TAG" -d "[Search] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # android deploy production
  - if: tag =~ -production\+client
    os: linux
    language: android
    jdk: oraclejdk8
    android:
      components:
      - tools
      - platform-tools
      # android 23,25,26
      - build-tools-23.0.1
      - build-tools-25.0.0
      - build-tools-25.0.1
      - build-tools-25.0.2
      - build-tools-26.0.1
      - build-tools-26.0.2
      - build-tools-26.0.3
      - android-23
      - android-25
      - android-26
      # extra
      - extra-android-m2repository
      - extra-google-google_play_services
      - extra-google-m2repository
      - addon-google_apis-google-16
      licenses:
      - 'android-sdk-preview-license-.+'
      - 'android-sdk-license-.+'
      - 'google-gdk-license-.+'
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "android"
    - source ./.travis/install.yarn.sh
    script:
    # build android & publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "android" -l "production"
    after_success:
    - ./.travis/discord.sh -t "Success Production $TRAVIS_TAG" -d "[Android] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Production $TRAVIS_TAG" -d "[Android] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
  # ios deploy production
  - if: tag =~ -production\+client
    osx_image: xcode9.2
    language: objective-c
    xcode_project: ios/democracyclient.xcodeproj
    xcode_scheme: ios/democracyclientTests
    before_install:
    - ./.travis/decrypt.sh
    - source ./.travis/env.sh
    # ensure we are on the master branch
    - ./.travis/gitbranch.sh -d "./" -b "origin/master" -r true
    install:
    - ./.travis/update.fastlane.sh -d "ios"
    - source ./.travis/install.yarn.sh
    script:
    # build ios and publish using fastlane
    - ./.travis/deploy.fastlane.sh -d "ios" -l "production"
    after_success:
    - ./.travis/discord.sh -t "Success Production $TRAVIS_TAG" -d "[iOS] Deployed Build $BUILD_NUMBER on Tag $TRAVIS_TAG successful" -c info
    after_failure:
    - ./.travis/discord.sh -t "Failure Production $TRAVIS_TAG" -d "[iOS] Deploy Build $BUILD_NUMBER on Tag $TRAVIS_TAG failed" -c error
after_script:
- echo "BUILD FINISHED"